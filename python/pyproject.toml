[project]
name = "copilotkit-runtime-py"
version = "0.1.0"
description = "Python port of CopilotKit Runtime - Production-ready Python implementation enabling seamless integration with Python AI frameworks"
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" }
authors = [{ name = "CopilotKit Team" }]
keywords = [
    "ai",
    "copilotkit",
    "runtime",
    "graphql",
    "agents",
    "langgraph",
    "crewai",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "fastapi>=0.111.0",
    "uvicorn[standard]>=0.30.0",
    "strawberry-graphql[fastapi]>=0.235.0",
    "sse-starlette>=1.8.0",
    "httpx>=0.27.0",
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
    "typing-extensions>=4.0.0",
    "copilotkit>=0.1.58",
]

[project.optional-dependencies]
langgraph = [
    "langgraph>=0.2.34",
    "langchain-core>=0.3.0",
    "langchain-openai>=0.3.29",
]
crewai = ["crewai>=0.70.0"]
redis = ["redis>=5.0.0"]
postgresql = ["asyncpg>=0.29.0", "sqlalchemy[asyncio]>=2.0.0"]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.6.0",
    "black>=24.0.0",
    "mypy>=1.8.0",
    "pre-commit>=3.0.0",
    "httpx>=0.27.0",          # for testing
]
all = ["copilotkit-runtime-py[langgraph,crewai,redis,postgresql]"]

[project.scripts]
copilotkit-runtime = "copilotkit.runtime_py.cli:main"

[project.urls]
Homepage = "https://github.com/CopilotKit/copilotkit"
Repository = "https://github.com/CopilotKit/copilotkit"
Documentation = "https://docs.copilotkit.ai"
Issues = "https://github.com/CopilotKit/copilotkit/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["copilotkit"]

[tool.ruff]
line-length = 100
target-version = "py310"
extend-exclude = [".venv", "__pycache__", "*.egg-info", "build", "dist"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",   # line too long (handled by black)
    "B008",   # do not perform function calls in argument defaults
    "ARG002", # unused method argument
    "ARG001", # unused function argument
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]    # unused imports in __init__.py files
"tests/*" = ["ARG", "S101"] # ignore unused arguments and assert usage in tests

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "copilotkit.*",
    "langgraph.*",
    "langchain_core.*",
    "langchain_openai.*",
    "crewai.*",
    "sse_starlette.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=copilotkit.runtime_py",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
asyncio_mode = "auto"
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "slow: marks tests as slow running",
]

[tool.coverage.run]
source = ["copilotkit"]
omit = ["*/tests/*", "*/test_*", "*/__pycache__/*", "*/.*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[project.entry-points."copilotkit.runtime_py.providers"]
langgraph = "copilotkit.runtime_py.providers.langgraph:LangGraphProvider"
crewai = "copilotkit.runtime_py.providers.crewai:CrewAIProvider"
